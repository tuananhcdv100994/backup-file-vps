import { useState } from "react";
import { Link } from "react-router-dom";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import {
  Bot,
  ArrowLeft,
  Send,
  MessageCircle,
  Zap,
  Globe,
  Users,
  Phone,
  User,
  Sparkles,
} from "lucide-react";

interface ChatMessage {
  role: "user" | "assistant";
  content: string;
  timestamp: string;
}

interface UserInfo {
  name?: string;
  phone?: string;
  email?: string;
}

export default function Demo() {
  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([
    {
      role: "assistant",
      content:
        "Xin ch√†o! T√¥i l√† chatbot AI demo c·ªßa Plugai. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ d·ªãch v·ª• chatbot AI c·ªßa ch√∫ng t√¥i. B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ t√≠nh nƒÉng, gi√° c·∫£, ho·∫∑c c√°ch s·ª≠ d·ª•ng. Tr∆∞·ªõc ti√™n, cho t√¥i bi·∫øt t√™n c·ªßa b·∫°n l√† g√¨?",
      timestamp: new Date().toLocaleTimeString(),
    },
  ]);

  const [message, setMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [userInfo, setUserInfo] = useState<UserInfo>({});
  const [askingForInfo, setAskingForInfo] = useState("name");

  const demoData = `
Plugai l√† n·ªÅn t·∫£ng t·∫°o chatbot AI th√¥ng minh h√†ng ƒë·∫ßu Vi·ªát Nam.

T√≠nh nƒÉng ch√≠nh:
- T·∫°o chatbot t·ª´ d·ªØ li·ªáu ri√™ng (text, file, website)
- T√≠ch h·ª£p Google Gemini AI ƒë·ªÉ tr·∫£ l·ªùi th√¥ng minh
- Embed d·ªÖ d√†ng v√†o website
- Thu th·∫≠p th√¥ng tin kh√°ch h√†ng t·ª± ƒë·ªông
- Ph√¢n t√≠ch cu·ªôc h·ªôi tho·∫°i chi ti·∫øt
- H·ªó tr·ª£ 24/7

G√≥i d·ªãch v·ª•:
- Mi·ªÖn ph√≠: 1 chatbot, 1000 tin nh·∫Øn/th√°ng
- Pro (299k/th√°ng): 5 chatbot, 10k tin nh·∫Øn/th√°ng 
- Enterprise (999k/th√°ng): Kh√¥ng gi·ªõi h·∫°n

Li√™n h·ªá: 07.927.627.94
Website: plugai.top
`;

  const callDemoAI = async (userMessage: string) => {
    try {
      // Check if we're collecting user info
      if (askingForInfo === "name" && !userInfo.name) {
        setUserInfo((prev) => ({ ...prev, name: userMessage }));
        setAskingForInfo("phone");
        return `R·∫•t vui ƒë∆∞·ª£c l√†m quen v·ªõi ${userMessage}! üòä

ƒê·ªÉ t√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n t·ªët nh·∫•t v√† g·ª≠i th√¥ng tin chi ti·∫øt qua tin nh·∫Øn sau n√†y, b·∫°n c√≥ th·ªÉ chia s·∫ª s·ªë ƒëi·ªán tho·∫°i kh√¥ng ·∫°?

(Th√¥ng tin c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c b·∫£o m·∫≠t tuy·ªát ƒë·ªëi)`;
      }

      if (askingForInfo === "phone" && !userInfo.phone) {
        setUserInfo((prev) => ({ ...prev, phone: userMessage }));
        setAskingForInfo("done");
        return `Ho√†n hÔøΩÔøΩÔøΩo! T√¥i ƒë√£ l∆∞u th√¥ng tin c·ªßa b·∫°n:
üë§ **${userInfo.name}**
üì± **${userMessage}**

B√¢y gi·ªù t√¥i c√≥ th·ªÉ t∆∞ v·∫•n chi ti·∫øt v·ªÅ Plugai cho b·∫°n r·ªìi! B·∫°n quan t√¢m ƒë·∫øn ƒëi·ªÅu g√¨ nh·∫•t:
‚Ä¢ üí∞ B·∫£ng gi√° v√† c√°c g√≥i d·ªãch v·ª•
‚Ä¢ üõ†Ô∏è C√°ch t·∫°o v√† t√πy ch·ªânh chatbot
‚Ä¢ üìà T√≠nh nƒÉng ph√¢n t√≠ch v√† b√°o c√°o
‚Ä¢ üîß C√°ch t√≠ch h·ª£p v√†o website c·ªßa b·∫°n

Ho·∫∑c b·∫°n c√≥ th·ªÉ h·ªèi b·∫•t c·ª© ƒëi·ªÅu g√¨ kh√°c!`;
      }

      // Enhanced AI responses using Gemini API
      const enhancedPrompt = `B·∫°n l√† chuy√™n gia t∆∞ v·∫•n chatbot AI c·ªßa Plugai.top - m·ªôt n·ªÅn t·∫£ng t·∫°o chatbot th√¥ng minh h√†ng ƒë·∫ßu Vi·ªát Nam.

TH√îNG TIN PLUGAI:
${demoData}

KH√ÅCH H√ÄNG:
- T√™n: ${userInfo.name || "Kh√°ch h√†ng"}
- SƒêT: ${userInfo.phone || "Ch∆∞a c√≥"}

NHI·ªÜM V·ª§: Tr·∫£ l·ªùi c√¢u h·ªèi "${userMessage}" m·ªôt c√°ch:
- Th√¢n thi·ªán, chuy√™n nghi·ªáp
- Chi ti·∫øt nh∆∞ng d·ªÖ hi·ªÉu
- S·ª≠ d·ª•ng emoji ph√π h·ª£p
- ƒê∆∞a ra l·ªùi khuy√™n c·ª• th·ªÉ
- Khuy·∫øn kh√≠ch d√πng th·ª≠ d·ªãch v·ª•

H√£y tr·∫£ l·ªùi nh∆∞ m·ªôt chuy√™n gia t∆∞ v·∫•n gi√†u kinh nghi·ªám.`;

      const response = await fetch("/api/gemini/chat", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          message: enhancedPrompt,
          chatbotId: "demo",
        }),
      });

      if (!response.ok) {
        throw new Error("API call failed");
      }

      const data = await response.json();
      return (
        data.response ||
        "Xin l·ªói, t√¥i g·∫∑p v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau."
      );
    } catch (error) {
      console.error("Demo AI error:", error);

      // Enhanced fallback responses
      const lowerMessage = userMessage.toLowerCase();

      if (
        lowerMessage.includes("gi√°") ||
        lowerMessage.includes("ph√≠") ||
        lowerMessage.includes("ti·ªÅn") ||
        lowerMessage.includes("cost")
      ) {
        return `üí∞ **B·∫£ng gi√° Plugai - R·∫•t c·∫°nh tranh so v·ªõi th·ªã tr∆∞·ªùng:**

üÜì **G√≥i Mi·ªÖn Ph√≠**
‚Ä¢ 1 chatbot ho√†n to√†n mi·ªÖn ph√≠
‚Ä¢ 1,000 tin nh·∫Øn/th√°ng
‚Ä¢ T√≠ch h·ª£p website c∆° b·∫£n
‚Ä¢ H·ªó tr·ª£ qua email

üíº **G√≥i Pro - 299,000ƒë/th√°ng**
‚Ä¢ 5 chatbot chuy√™n nghi·ªáp
‚Ä¢ 10,000 tin nh·∫Øn/th√°ng
‚Ä¢ Ph√¢n t√≠ch n√¢ng cao & b√°o c√°o
‚Ä¢ T√πy ch·ªânh giao di·ªán th∆∞∆°ng hi·ªáu
‚Ä¢ H·ªó tr·ª£ ∆∞u ti√™n 24/7

üè¢ **G√≥i Enterprise - 999,000ƒë/th√°ng**
‚Ä¢ Kh√¥ng gi·ªõi h·∫°n chatbot
‚Ä¢ Kh√¥ng gi·ªõi h·∫°n tin nh·∫Øn
‚Ä¢ API ri√™ng + White label
‚Ä¢ Dedicated support team

**B·∫Øt ƒë·∫ßu mi·ªÖn ph√≠ ngay kh√¥ng c·∫ßn th·∫ª t√≠n d·ª•ng!** üöÄ`;
      }

      if (
        lowerMessage.includes("t√≠nh nƒÉng") ||
        lowerMessage.includes("ch·ª©c nƒÉng") ||
        lowerMessage.includes("feature")
      ) {
        return `üõ†Ô∏è **T√≠nh nƒÉng ƒë√°ng ch√∫ √Ω c·ªßa Plugai:**

ü§ñ **AI Th√¥ng Minh**
‚Ä¢ S·ª≠ d·ª•ng Google Gemini 2.0 m·ªõi nh·∫•t
‚Ä¢ Tr·∫£ l·ªùi ch√≠nh x√°c d·ª±a tr√™n d·ªØ li·ªáu ri√™ng
‚Ä¢ H·ªçc h·ªèi t·ª´ cu·ªôc h·ªôi tho·∫°i th·ª±c t·∫ø

üìä **Ph√¢n T√≠ch Chuy√™n S√¢u**
‚Ä¢ Theo d√µi hi·ªáu su·∫•t realtime
‚Ä¢ B√°o c√°o t∆∞∆°ng t√°c chi ti·∫øt
‚Ä¢ Ph√¢n t√≠ch c·∫£m x√∫c kh√°ch h√†ng

üåê **T√≠ch H·ª£p ƒêa N·ªÅn T·∫£ng**
‚Ä¢ Website, Facebook, Zalo
‚Ä¢ WordPress, Shopify, Wix
‚Ä¢ API RESTful cho developers

üì± **Thu Th·∫≠p Lead T·ª± ƒê·ªông**
‚Ä¢ L∆∞u th√¥ng tin kh√°ch h√†ng
‚Ä¢ Xu·∫•t Excel, CRM integration
‚Ä¢ Follow-up marketing t·ª± ƒë·ªông

B·∫°n quan t√¢m t√≠nh nƒÉng n√†o nh·∫•t? T√¥i c√≥ th·ªÉ demo chi ti·∫øt! üòä`;
      }

      if (
        lowerMessage.includes("t√≠ch h·ª£p") ||
        lowerMessage.includes("c√†i ƒë·∫∑t") ||
        lowerMessage.includes("install")
      ) {
        return `üîß **T√≠ch h·ª£p Plugai v√†o website c·ª±c k·ª≥ ƒë∆°n gi·∫£n:**

**Ch·ªâ 3 b∆∞·ªõc trong 5 ph√∫t:**
1Ô∏è‚É£ T·∫°o chatbot t·ª´ d·ªØ li·ªáu c·ªßa b·∫°n
2Ô∏è‚É£ Copy 1 ƒëo·∫°n code JavaScript
3Ô∏è‚É£ D√°n v√†o website ‚Üí Ho√†n th√†nh!

**H·ªó tr·ª£ m·ªçi n·ªÅn t·∫£ng:**
‚úÖ WordPress, Joomla, Drupal
‚úÖ Shopify, WooCommerce
‚úÖ React, Vue, Angular
‚úÖ HTML tƒ©nh b·∫•t k·ª≥

**Kh√¥ng c·∫ßn k·ªπ thu·∫≠t:**
‚Ä¢ Kh√¥ng c·∫ßn coding
‚Ä¢ T·ª± ƒë·ªông responsive mobile
‚Ä¢ T·∫£i nhanh, kh√¥ng ·∫£nh h∆∞·ªüng website
‚Ä¢ T√πy ch·ªânh m√†u s·∫Øc, v·ªã tr√≠ d·ªÖ d√†ng

B·∫°n mu·ªën t√¥i h∆∞·ªõng d·∫´n chi ti·∫øt cho lo·∫°i website n√†o? ü§î`;
      }

      if (
        lowerMessage.includes("demo") ||
        lowerMessage.includes("test") ||
        lowerMessage.includes("th·ª≠")
      ) {
        return `üéØ **B·∫°n mu·ªën tr·∫£i nghi·ªám Plugai?**

**C√°c c√°ch d√πng th·ª≠:**
üîç B·∫°n ƒëang chat v·ªõi chatbot demo ngay ƒë√¢y!
üÜì ƒêƒÉng k√Ω t√†i kho·∫£n mi·ªÖn ph√≠
üì± T·∫°o chatbot ƒë·∫ßu ti√™n trong 5 ph√∫t
üåê Test embed code tr√™n website ri√™ng

**Demo n√†y cho th·∫•y:**
‚Ä¢ AI tr·∫£ l·ªùi th√¥ng minh b·∫±ng ti·∫øng Vi·ªát
‚Ä¢ Thu th·∫≠p th√¥ng tin kh√°ch h√†ng t·ª± ƒë·ªông
‚Ä¢ Giao di·ªán ƒë·∫πp, responsive
‚Ä¢ T√πy ch·ªânh theo th∆∞∆°ng hi·ªáu

Ready ƒë·ªÉ t·∫°o chatbot ri√™ng c·ªßa b·∫°n ch∆∞a?
‚Üí ƒêƒÉng k√Ω mi·ªÖn ph√≠ ch·ªâ m·∫•t 30 gi√¢y! üöÄ`;
      }

      return `T√¥i hi·ªÉu b·∫°n ƒëang quan t√¢m ƒë·∫øn "${userMessage}".

L√† chuy√™n gia t∆∞ v·∫•n Plugai, t√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªõi:
üîπ T∆∞ v·∫•n gi√° c·∫£ v√† g√≥i d·ªãch v·ª• ph√π h·ª£p
üîπ H∆∞·ªõng d·∫´n t√≠nh nƒÉng v√† c√°ch s·ª≠ d·ª•ng
üîπ Demo tr·ª±c ti·∫øp v√† setup chatbot
üîπ T√≠ch h·ª£p v√†o website/fanpage

B·∫°n mu·ªën t√¨m hi·ªÉu v·∫•n ƒë·ªÅ g√¨ c·ª• thÔøΩÔøΩÔøΩ nh·∫•t? Ho·∫∑c ƒë·ªÉ t√¥i t∆∞ v·∫•n t·ªïng quan v·ªÅ Plugai cho b·∫°n? üòä`;
    }
  };

  const handleSendMessage = async () => {
    if (!message.trim()) return;

    const userMessage: ChatMessage = {
      role: "user",
      content: message,
      timestamp: new Date().toLocaleTimeString(),
    };

    setChatMessages((prev) => [...prev, userMessage]);
    setMessage("");
    setIsLoading(true);

    const aiResponse = await callDemoAI(message);

    const assistantMessage: ChatMessage = {
      role: "assistant",
      content: aiResponse,
      timestamp: new Date().toLocaleTimeString(),
    };

    setChatMessages((prev) => [...prev, assistantMessage]);
    setIsLoading(false);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-background to-neo-blue-950/20">
      {/* Header */}
      <header className="border-b border-border/50 backdrop-blur-xl bg-background/80">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <Link
              to="/"
              className="flex items-center gap-2 text-muted-foreground hover:text-foreground transition-colors"
            >
              <ArrowLeft className="w-4 h-4" />
              V·ªÅ trang ch·ªß
            </Link>
            <div className="flex items-center gap-3">
              <div className="flex items-center justify-center w-10 h-10 rounded-xl bg-gradient-to-r from-neo-blue-500 to-neo-blue-600 neo-glow">
                <MessageCircle className="w-6 h-6 text-white" />
              </div>
              <div>
                <h1 className="text-xl font-bold text-foreground">
                  Demo Chatbot AI
                </h1>
                <p className="text-xs text-muted-foreground">
                  Tr·∫£i nghi·ªám th·ª±c t·∫ø
                </p>
              </div>
            </div>
            <div className="w-32">
              <Link to="/register">
                <Button className="neo-button text-white">T·∫°o t√†i kho·∫£n</Button>
              </Link>
            </div>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto">
          <div className="text-center mb-8">
            <Badge className="mb-4 bg-neo-blue-500/10 text-neo-blue-400 border-neo-blue-500/20">
              <Sparkles className="w-4 h-4 mr-2" />
              Demo tr·ª±c ti·∫øp
            </Badge>
            <h2 className="text-3xl md:text-4xl font-bold mb-4">
              Tr√≤ chuy·ªán v·ªõi
              <span className="bg-gradient-to-r from-neo-blue-400 to-neo-blue-600 bg-clip-text text-transparent">
                {" "}
                Chatbot AI
              </span>
            </h2>
            <p className="text-xl text-muted-foreground">
              Th·ª≠ ngay chatbot AI ƒë∆∞·ª£c t·∫°o b·ªüi Plugai
            </p>
          </div>

          <div className="grid lg:grid-cols-3 gap-8">
            {/* Chat Interface */}
            <div className="lg:col-span-2">
              <Card className="neo-card">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Bot className="w-5 h-5 text-neo-blue-500" />
                    Chatbot Demo - Plugai AI
                  </CardTitle>
                  <CardDescription>
                    Bot n√†y s·ª≠ d·ª•ng Google Gemini AI v√† ƒë∆∞·ª£c training v·ªõi d·ªØ
                    li·ªáu v·ªÅ Plugai
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {/* Chat Messages */}
                    <div className="h-96 border border-border/50 rounded-lg p-4 overflow-y-auto bg-background/30">
                      {chatMessages.map((msg, index) => (
                        <div
                          key={index}
                          className={`mb-4 ${msg.role === "user" ? "text-right" : "text-left"}`}
                        >
                          <div
                            className={`inline-block max-w-[85%] p-3 rounded-lg ${
                              msg.role === "user"
                                ? "bg-neo-blue-500 text-white"
                                : "bg-secondary text-foreground border border-border/50"
                            }`}
                          >
                            <p className="text-sm whitespace-pre-wrap">
                              {msg.content}
                            </p>
                            <p className="text-xs opacity-70 mt-1">
                              {msg.timestamp}
                            </p>
                          </div>
                        </div>
                      ))}

                      {isLoading && (
                        <div className="text-left">
                          <div className="inline-block bg-secondary text-foreground p-3 rounded-lg border border-border/50">
                            <div className="flex items-center gap-2">
                              <div className="animate-spin w-4 h-4 border-2 border-neo-blue-500 border-t-transparent rounded-full"></div>
                              <span className="text-sm">ƒêang tr·∫£ l·ªùi...</span>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>

                    {/* Message Input */}
                    <div className="flex gap-2">
                      <Input
                        placeholder="Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n..."
                        value={message}
                        onChange={(e) => setMessage(e.target.value)}
                        onKeyPress={(e) =>
                          e.key === "Enter" && handleSendMessage()
                        }
                        className="bg-background/50 border-border/50 focus:border-neo-blue-500"
                        disabled={isLoading}
                      />
                      <Button
                        onClick={handleSendMessage}
                        disabled={isLoading || !message.trim()}
                        className="neo-button text-white px-4"
                      >
                        <Send className="w-4 h-4" />
                      </Button>
                    </div>

                    {/* User Info Display */}
                    {(userInfo.name || userInfo.phone) && (
                      <div className="p-3 rounded-lg bg-green-500/10 border border-green-500/20">
                        <h3 className="font-semibold text-green-600 mb-2">
                          Th√¥ng tin ƒë√£ l∆∞u:
                        </h3>
                        <div className="text-sm text-green-600 space-y-1">
                          {userInfo.name && (
                            <div className="flex items-center gap-2">
                              <User className="w-4 h-4" />
                              <span>T√™n: {userInfo.name}</span>
                            </div>
                          )}
                          {userInfo.phone && (
                            <div className="flex items-center gap-2">
                              <Phone className="w-4 h-4" />
                              <span>SƒêT: {userInfo.phone}</span>
                            </div>
                          )}
                        </div>
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Info Panel */}
            <div className="space-y-6">
              <Card className="neo-card">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Zap className="w-5 h-5 text-neo-blue-500" />
                    T√≠nh nƒÉng Demo
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3 text-sm">
                    <div className="flex items-center gap-2">
                      <div className="w-2 h-2 rounded-full bg-green-500" />
                      <span>Thu th·∫≠p th√¥ng tin t·ª± ƒë·ªông</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-2 h-2 rounded-full bg-neo-blue-500" />
                      <span>Tr·∫£ l·ªùi b·∫±ng Google Gemini AI</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-2 h-2 rounded-full bg-purple-500" />
                      <span>L∆∞u l·ªãch s·ª≠ cu·ªôc h·ªôi tho·∫°i</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-2 h-2 rounded-full bg-orange-500" />
                      <span>T√πy ch·ªânh giao di·ªán</span>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card className="neo-card">
                <CardHeader>
                  <CardTitle>C√¢u h·ªèi g·ª£i √Ω</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    {[
                      "Gi√° c·∫£ nh∆∞ th·∫ø n√†o?",
                      "C√≥ nh·ªØng t√≠nh nƒÉng g√¨?",
                      "L√†m sao t√≠ch h·ª£p v√†o website?",
                      "Kh√°c g√¨ so v·ªõi ChatGPT?",
                      "C√≥ h·ªó tr·ª£ ti·∫øng Vi·ªát kh√¥ng?",
                    ].map((suggestion, index) => (
                      <Button
                        key={index}
                        variant="outline"
                        size="sm"
                        className="w-full text-left justify-start text-sm"
                        onClick={() => setMessage(suggestion)}
                      >
                        {suggestion}
                      </Button>
                    ))}
                  </div>
                </CardContent>
              </Card>

              <Card className="neo-card">
                <CardHeader>
                  <CardTitle>S·∫µn s√†ng t·∫°o chatbot?</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <p className="text-sm text-muted-foreground">
                      T·∫°o chatbot AI nh∆∞ demo n√†y ch·ªâ trong 5 ph√∫t
                    </p>
                    <div className="space-y-2">
                      <Link to="/register">
                        <Button className="w-full neo-button text-white">
                          <Users className="w-4 h-4 mr-2" />
                          ƒêƒÉng k√Ω mi·ªÖn ph√≠
                        </Button>
                      </Link>
                      <Link to="/login">
                        <Button variant="outline" className="w-full">
                          ƒêƒÉng nh·∫≠p
                        </Button>
                      </Link>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
